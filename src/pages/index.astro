---
import Layout from '../layouts/layout.astro';
import { Image } from 'astro:assets';
import logo from '../assets/hound2.svg';

import Search from '../components/searchbar.astro';

import { GET } from './api/search.ts'

let response = await GET(Astro)
const data = await response.json()
---

<Layout title='HoundAI - Exploring Tech and AI'>
  <header
    class='sticky top-0 w-full z-10 bg-[radial-gradient(transparent_1px,#ffff_0.5px)] [background-size:4px_4px] backdrop-blur-sm'
  >
    <nav class='flex justify-between items-center py-4 px-6 max-w-6xl mx-auto'>
      <a href='#home' class='text-2xl font-light font-serif'>HoundAI</a>
      <ul class='flex gap-8'>
        <li>
          <a
            href='#home'
            class='text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out'
          >
            Home
          </a>
        </li>
        <li>
          <a
            href='#articles'
            class='text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out'
          >
            Articles
          </a>
        <li>
          <a
            href='#articles'
            class='text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out'
          >
         {data.greeting}
          </a>
        </li>
      </ul>
    </nav>
  </header>

  <script>
    async function fetchLatestArticles(): Promise<void> {
      try {
        const apiKey = import.meta.env.PUBLIC_API_KEY;
        const response = await fetch(
          `https://api.core.ac.uk/v3/search/works?q=latest&apiKey=${apiKey}&limit=5&sort=publishedDate`,
          
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        displayLatestArticles(data.results);
      } catch (error) {
        console.error('Error fetching latest articles:', error);
      }
    }

    function displayLatestArticles(articles: any[]): void {
      const latestArticlesContainer =
        document.getElementById('latest-articles');
      if (!latestArticlesContainer) return;

      latestArticlesContainer.innerHTML = '';

      articles.forEach((article) => {
        const articleElement = document.createElement('div');
        articleElement.className = 'mb-8 border-b border-gray-200 pb-8';
        articleElement.innerHTML = `
          <h3 class="text-xl font-serif font-light mb-2">
            <a href="/articles/${article.id}" class="hover:underline">${article.title}</a>
          </h3>
          <p class="text-gray-600 mb-2">${article.abstract?.substring(0, 150)}...</p>
          <div class="flex items-center text-sm text-gray-500">
            <span>${new Date(article.publishedDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
            <span class="mx-2">â€¢</span>
            <span>${article.authors?.map((author: any) => author.name).join(', ') || 'Unknown Author'}</span>
          </div>
        `;
        latestArticlesContainer.appendChild(articleElement);
      });
    }

    document.addEventListener('DOMContentLoaded', fetchLatestArticles);
  </script>

  <main class='max-w-6xl mx-auto px-4'>
    <section id='home' class='text-center py-20 md:py-32'>
      <Image
        src={logo}
        alt='HoundAI Logo'
        class='mx-auto mb-8 w-40 h-40 md:w-56 md:h-56 transform hover:scale-105 transition-transform duration-300'
        draggable={'false'}
        format={'webp'}
        loading={'eager'}
      />
      <h1
        class='text-4xl md:text-6xl font-light mb-4 animate-fade-in font-serif'
      >
        HoundAI
      </h1>
      <p
        class='text-gray-700 text-lg md:text-xl mb-8 max-w-2xl mx-auto animate-fade-in-delayed'
      >
        Search and explore the latest articles on technology and AI.
      </p>
      <Search />
    </section>

    <section id='articles' class='py-16'>
      <h2 class='text-3xl font-light mb-8 font-serif'>Latest Articles</h2>
      <div id='latest-articles' class='p-4'></div>
    </section>
  </main>
</Layout>

<script>
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', function (e: Event) {
      e.preventDefault();
      const target = this as HTMLAnchorElement;
      const element = document.querySelector(target.getAttribute('href')!);
      if (element) {
        element.scrollIntoView({
          behavior: 'smooth',
        });
      }
    } as (this: HTMLAnchorElement, e: Event) => void);
  });
</script>
